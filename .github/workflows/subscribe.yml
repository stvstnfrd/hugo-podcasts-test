name: Subscribe to an RSS Feed
on:
  issues:
    types:
    - opened
    - reopened
  workflow_dispatch:
    inputs:
      url:
        description: 'The URL of the RSS feed'
        required: true
        type: string
      title:
        description: 'The title of the RSS feed'
        default: ''
        required: false
        type: string
      website:
        description: 'The website of the RSS feed'
        default: ''
        required: false
        type: string
      file:
        description: 'The file containing your feeds; this MUST exist'
        default: 'etc/feed.opml'
        required: false
        type: string
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      url: ${{ steps.params.outputs.url }}
      title: ${{ steps.params.outputs.title }}
      website: ${{ steps.params.outputs.website }}
      file: ${{ steps.params.outputs.file }}
      action: ${{ steps.params.outputs.action }}
      description: ${{ steps.params.outputs.description }}
      attachment: ${{ steps.params.outputs.attachment }}
      artwork: ${{ steps.params.outputs.artwork }}
      feed_title: ${{ steps.params.outputs.feed_title }}
    steps:
    - uses: actions/checkout@v3
    - name: Set parameters
      id: params
      env:
        FEED_ISSUE: issue.txt
        GET_KEY_FROM_ISSUE: ./bin/get-key-from-issue
      run: |
        url=''
        action=''
        description=''
        feed_title=''
        attachment=''
        artwork=''
        if [ "${GITHUB_EVENT_NAME}" = 'issues' ]; then
          printf '%s\n' '${{ github.event.issue.body }}' >"${FEED_ISSUE}"
          action="$(${GET_KEY_FROM_ISSUE} Action "${FEED_ISSUE}")"
          delimiter="$(openssl rand -hex 8)"
          echo "description<<${delimiter}" >>"${GITHUB_OUTPUT}"
          ${GET_KEY_FROM_ISSUE} Description "${FEED_ISSUE}" >>"${GITHUB_OUTPUT}"
          echo "${delimiter}" >>"${GITHUB_OUTPUT}"
          url="$(${GET_KEY_FROM_ISSUE} URL "${FEED_ISSUE}")"
          title="$(${GET_KEY_FROM_ISSUE} Title "${FEED_ISSUE}")"
          website="$(${GET_KEY_FROM_ISSUE} Website "${FEED_ISSUE}")"
          feed_title="$(${GET_KEY_FROM_ISSUE} 'Feed Title' "${FEED_ISSUE}")"
          attachment="$(${GET_KEY_FROM_ISSUE} Attachment "${FEED_ISSUE}")"
          artwork="$(${GET_KEY_FROM_ISSUE} Artwork "${FEED_ISSUE}")"
          file='etc/feed.opml'
        elif  [ "${GITHUB_EVENT_NAME}" = 'workflow_dispatch' ]; then
          url="${{ inputs.url }}"
          title="${{ inputs.title }}"
          website="${{ inputs.website }}"
          file="${{ inputs.file }}"
          action=import-feed
        else
          echo 'Unsupported workflow type' >/dev/stderror
        fi
        echo "url=${url}" >>"${GITHUB_OUTPUT}"
        echo "title=${title}" >>"${GITHUB_OUTPUT}"
        echo "website=${website}" >>"${GITHUB_OUTPUT}"
        echo "file=${file}" >>"${GITHUB_OUTPUT}"
        echo "action=${action}" >>"${GITHUB_OUTPUT}"
        echo "feed_title=${feed_title}" >>"${GITHUB_OUTPUT}"
        echo "attachment=${attachment}" >>"${GITHUB_OUTPUT}"
        echo "artwork=${artwork}" >>"${GITHUB_OUTPUT}"
  subscribe:
    needs: setup
    if: needs.setup.outputs.action == 'import-feed'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Add entry to OPML file
      env:
        OPML_URL: ${{ needs.setup.outputs.url }}
        OPML_TITLE: ${{ needs.setup.outputs.title }}
        OPML_WEBSITE: ${{ needs.setup.outputs.website }}
        OPML_FILE: ${{ needs.setup.outputs.file }}
      run: make subscribe
    - name: Validate the updated file
      run: make lint-xml
    - name: Preview the feed
      id: feed
      run: |
        title="${{ needs.setup.outputs.title }}"
        title="${title:-${{ needs.setup.outputs.url }}}"
        echo "title=${title}" >>"${GITHUB_OUTPUT}"
        delimiter="$(openssl rand -hex 8)"
        echo "description<<${delimiter}" >>"${GITHUB_OUTPUT}"
        curl '${{ needs.setup.outputs.url }}' >input.xml
        xmllint --format input.xml >>"${GITHUB_OUTPUT}"
        echo "${delimiter}" >>"${GITHUB_OUTPUT}"
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v4
      with:
        add-paths: |
          ${{ needs.setup.outputs.file }}
        branch-suffix: timestamp
        commit-message: |
          feat: subscribe to new feed; ${{ steps.feed.outputs.title }}

          Fix #${{ github.event.issue.number }}
        delete-branch: true
        title: 'feat: subscribe to new feed; ${{ steps.feed.outputs.title }}'
        body: |
          # ${{ steps.feed.outputs.title }}

          - [Feed](${{ needs.setup.outputs.url }})
          - [Website](${{ needs.setup.outputs.website }})

          ## Preview
          ```xml
          ${{ steps.feed.outputs.description }}
          ```
        labels: |
          feeds
  create-feed:
    if: needs.setup.outputs.action == 'create-feed'
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - id: feed
      name: Create new podcast index
      env:
        FEED_ISSUE: issue.txt
      run: |
        printf '%s\n' '${{ github.event.issue.body }}' >"${FEED_ISSUE}"
        make feed
    - name: Validate the changes
      run: make build
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v4
      with:
        add-paths: |
          .github/
          src/content
        branch-suffix: timestamp
        commit-message: |
          feat: create new feed; ${{ needs.setup.outputs.title }}

          Fix #${{ github.event.issue.number }}
        delete-branch: true
        title: 'feat: create new feed; ${{ needs.setup.outputs.title }}'
        body: |
          # ${{ needs.setup.outputs.title }}

          ${{ needs.setup.outputs.description }}

          Fix #${{ github.event.issue.number }}
        labels: |
          create-feed
  create-episode:
    if: needs.setup.outputs.action == 'create-episode'
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - id: episode
      name: Create new podcast index
      env:
        EPISODE_TITLE: '${{ needs.setup.outputs.title }}'
        FEED_TITLE: '${{ needs.setup.outputs.feed_title }}'
        EPISODE_ATTACHMENT: '${{ needs.setup.outputs.attachment }}'
        EPISODE_ARTWORK: '${{ needs.setup.outputs.artwork }}'
      run: make episode
    - name: Validate the changes
      run: make build
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v4
      with:
        add-paths: |
          src/content
        branch-suffix: timestamp
        commit-message: |
          feat: create new episode; ${{ needs.setup.outputs.title }}

          Fix #${{ github.event.issue.number }}
        delete-branch: true
        title: 'feat: create new episode; ${{ needs.setup.outputs.title }}'
        body: |
          # ${{ needs.setup.outputs.title }}

          ${{ needs.setup.outputs.description }}
        labels: |
          create-episode
    - name: Cleanup uploads
      env:
        EPISODE_ATTACHMENT: '${{ needs.setup.outputs.attachment }}'
        EPISODE_ARTWORK: '${{ needs.setup.outputs.artwork }}'
      shell: bash
      run: |
        git config --global user.name "${GITHUB_REPOSITORY%/*}"
        git config --global user.email "${GITHUB_REPOSITORY%/*}@users.noreply.github.com"
        make git-cleanup-uploads
